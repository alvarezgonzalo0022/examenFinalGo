// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/appointment/{id}": {
            "delete": {
                "description": "Delete appointment by id",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["appointment"],
                "summary": "Delete an appointment",
                "parameters": [{
                    "type": "integer",
                    "description": "ID of the appointment",
                    "name": "id",
                    "in": "path",
                    "required": true
                }],
                "responses": {
                    "200": {
                        "description": "Appointment successfully deleted"
                    },
                    "404": {
                        "description": "Appointment not found"
                    }
                }
            },
            "patch": {
                "description": "Update appointment by id",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["appointment"],
                "summary": "Update an appointment",
                "parameters": [{
                    "type": "integer",
                    "description": "ID of the appointment",
                    "name": "id",
                    "in": "path",
                    "required": true
                }],
                "responses": {
                    "200": {
                        "description": "Appointment successfully updated"
                    },
                    "400": {
                        "description": "Invalid request format"
                    },
                    "404": {
                        "description": "Appointment not found"
                    }
                }
            }
        },
        "/dentists": {
            "get": {
                "description": "Get all dentists",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["dentist"],
                "summary": "Retrieve all dentists",
                "responses": {
                    "200": {
                        "description": "List of dentists"
                    }
                }
            },
            "post": {
                "description": "Create a new dentist",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["dentist"],
                "summary": "Create a dentist",
                "responses": {
                    "201": {
                        "description": "Dentist created successfully"
                    },
                    "400": {
                        "description": "Invalid input data"
                    }
                }
            }
        },
        "/patients": {
            "get": {
                "description": "Get all patients",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["patient"],
                "summary": "Retrieve all patients",
                "responses": {
                    "200": {
                        "description": "List of patients"
                    }
                }
            },
            "post": {
                "description": "Create a new patient",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["patient"],
                "summary": "Create a patient",
                "responses": {
                    "201": {
                        "description": "Patient created successfully"
                    },
                    "400": {
                        "description": "Invalid input data"
                    }
                }
            }
        },
        // Add other paths here
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
    Version:          "1.0",
    Host:             "localhost:8080",
    BasePath:         "/api/v1",
    Schemes:          []string{},
    Title:            "Swagger Example API",
    Description:      "This is a sample server celler server.",
    InfoInstanceName: "swagger",
    SwaggerTemplate:  docTemplate,
    LeftDelim:        "{{",
    RightDelim:       "}}",
}

func init() {
    swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
